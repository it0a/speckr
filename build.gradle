import org.gradle.logging.StyledTextOutput
import org.gradle.logging.StyledTextOutputFactory
import static org.gradle.logging.StyledTextOutput.Style

def out = services.get(StyledTextOutputFactory).create("Output")

apply plugin: "groovy"

version = "1.0-SNAPSHOT"
description = "Test Runner"

System.setProperty('user.timezone', 'UTC')

configurations {
    servicesCompile.extendsFrom compile
    servicesRuntime.extendsFrom runtime
}

repositories {
    mavenCentral()
    maven { url 'http://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:1.8.8"
    compile "org.hibernate:hibernate-core:4.3.6.Final"
    compile "commons-lang:commons-lang:2.2"
    compile "cglib:cglib:2.2"
    compile "commons-collections:commons-collections:3.2.1"
    compile "commons-lang:commons-lang:2.2"
    compile "org.springframework:spring-aop:4.1.0.RELEASE"
    compile "org.aspectj:aspectjweaver:1.6.8"
    testCompile "org.spockframework:spock-core:1.0-groovy-1.8-SNAPSHOT"
}

sourceSets {

    main {
        groovy {
            srcDirs = 
            [
                '../SmartsToo2/grails-app/domain/com/streamlinx/fsc',
                '../Blackcomb2/grails-app/domain/com/streamlinx/bcpt'
            ]
        }
    }

    services {
        groovy { 
            srcDirs =
            [
                '../SmartsToo2/grails-app/services/com/streamlinx/fsc'
            ]
            include "CustomerReceiptService.groovy"
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }


    test {
        groovy {
            srcDirs = ['../SmartsToo2/spec/']
        }
        compileClasspath += main.output + services.output
        runtimeClasspath = output + compileClasspath
    }
}

test {
    def realExecTime = 0
    def aggTestExecTime = 0
    def aggOverheadTime = 0
    outputs.upToDateWhen { false }
    beforeSuite { testDescriptor ->
        if( testDescriptor.parent == null )
        {
            out.append("Initializing...").println()
        }
        else if( testDescriptor?.parent?.parent == null )
        {
            out.append("Executing...").println()
        }
        else
        {
            out.withStyle(Style.Description).append("======================> ")
            out.withStyle(Style.UserInput).append(testDescriptor.name.toString())
            out.println()
        }
    }


    afterTest { testDescriptor, testResult -> 
        String testResultString = testDescriptor.name
        out.append("[")
        if( testResult.failedTestCount == 0 )
        {
            out.withStyle(Style.Identifier).append("PASS")
        }
        else
        {
            out.withStyle(Style.Failure).append("FAIL")
        }
        out.append("] |")
        int testDuration = testResult.endTime - testResult.startTime
        realExecTime += testDuration
        if( testDuration > 75 )
        {
            out.withStyle(Style.Failure).format("% 8d", testDuration)        
            out.withStyle(Style.Failure).append("ms!")
        }
        else
        {
            out.format("% 8d", testDuration)        
            out.append("ms ")
        }
        out.append("| " + testResultString).println()

    }
    afterSuite { testDescriptor, testResult ->
        if( testDescriptor.parent != null )
        {
            int suiteDuration = testResult.endTime - testResult.startTime
            if ( testDescriptor.parent.parent == null )
            {
                out.withStyle(Style.UserInput).append("Finished " + testResult.testCount + " tests in [real: " + aggTestExecTime + "ms overhead: " + aggOverheadTime + "ms total: " + suiteDuration + "ms] (" + testResult.failedTestCount + " failed)")
                out.println()
            }
            else
            {
                out.append("[")
                out.withStyle(Style.UserInput).append("DONE")
                out.append("] |")
                out.withStyle(Style.ProgressStatus).format("% 8d", suiteDuration)
                out.append("ms | time in test: ${realExecTime}ms | time elsewhere: ${suiteDuration-realExecTime}ms ")
            }
            aggTestExecTime += realExecTime
            aggOverheadTime += suiteDuration-realExecTime
        }
        out.println()
        realExecTime = 0
    }
}

